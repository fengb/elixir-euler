#!/usr/bin/env elixir

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

defmodule Euler12 do
  def triangle_stream do
    Stream.unfold {2, 1}, fn({last, sum}) -> {sum, {last+1, sum+last}} end
  end

  def divisors(num) do
    1..(:math.sqrt(num) |> round)
    |> Enum.flat_map fn(divisor) ->
         {quo, rem} = divrem(num, divisor)
         cond do
           rem != 0       -> []
           divisor == quo -> [divisor]
           true           -> [divisor, quo]
         end
       end
  end

  def divrem(n, d) do
    {div(n, d), rem(n, d)}
  end
end

Euler12.triangle_stream
|> Stream.drop_while(fn(n) ->
     divisors = Euler12.divisors(n)
     Enum.count(divisors) <= 500
   end)
|> Enum.take(1)
|> hd
|> IO.inspect
